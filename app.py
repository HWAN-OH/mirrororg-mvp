{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/HWAN-OH/mirrororg-mvp/blob/main/app.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import streamlit as st\n",
        "import google.generativeai as genai\n",
        "import pandas as pd\n",
        "import re\n",
        "import json\n",
        "from pyvis.network import Network\n",
        "import streamlit.components.v1 as components\n",
        "from datetime import datetime\n",
        "\n",
        "# --- [Delta] Centralized Text Management for Multilingual Support ---\n",
        "TEXTS = {\n",
        "    # General UI\n",
        "    \"page_title\": {\"ko\": \"MirrorOrg MVP v3\", \"en\": \"MirrorOrg MVP v3\"},\n",
        "    \"main_title\": {\"ko\": \"🪞 MirrorOrg MVP: 종합 팀 분석\", \"en\": \"🪞 MirrorOrg MVP: Comprehensive Team Analysis\"},\n",
        "    \"main_description\": {\n",
        "        \"ko\": \"'미러오알지 팀 분석 사례'에 기반한 다차원 협업 진단 도구입니다.\\n카카오톡 채팅 기록을 업로드하여 **팀 프로필, 피로도 변화, 관계 네트워크**를 종합적으로 진단합니다.\",\n",
        "        \"en\": \"A multi-dimensional collaboration diagnostic tool based on the 'MirrorOrg Team Analysis Case Study'.\\nUpload your KakaoTalk chat history to diagnose **Team Profile, Fatigue Trajectory, and Relationship Network**.\"\n",
        "    },\n",
        "    # Sidebar\n",
        "    \"sidebar_header\": {\"ko\": \"설정\", \"en\": \"Settings\"},\n",
        "    \"language_selector\": {\"ko\": \"언어\", \"en\": \"Language\"},\n",
        "    \"api_key_loaded\": {\"ko\": \"API 키가 안전하게 로드되었습니다.\", \"en\": \"API key loaded securely.\"},\n",
        "    \"local_env_warning\": {\"ko\": \"⚠️ 로컬 환경에서 실행 중입니다.\", \"en\": \"⚠️ Running in a local environment.\"},\n",
        "    \"api_key_input\": {\"ko\": \"Gemini API 키를 입력하세요:\", \"en\": \"Enter your Gemini API Key:\"},\n",
        "    \"api_key_success\": {\"ko\": \"API 키 설정 완료!\", \"en\": \"API key configured successfully!\"},\n",
        "    \"api_key_failure\": {\"ko\": \"API 키 설정 실패\", \"en\": \"API key configuration failed\"},\n",
        "    \"api_key_info\": {\n",
        "        \"ko\": \"시작하려면 Gemini API 키를 입력해주세요. [API 키 발급받기](https://aistudio.google.com/app/apikey)\",\n",
        "        \"en\": \"Please enter your Gemini API key to start. [Get an API Key](https://aistudio.google.com/app/apikey)\"\n",
        "    },\n",
        "    # Main Content\n",
        "    \"upload_header\": {\"ko\": \"1. 채팅 기록 업로드\", \"en\": \"1. Upload Chat History\"},\n",
        "    \"upload_info\": {\n",
        "        \"ko\": \"카카오톡 대화 '내보내기' > '텍스트 파일만' 저장 후 업로드하세요. 개인정보 보호를 위해 이름 등 민감정보를 수정하는 것을 권장합니다.\",\n",
        "        \"en\": \"Export your KakaoTalk chat ('Export Text Only') and upload the .txt file. For privacy, we recommend anonymizing names and sensitive information before uploading.\"\n",
        "    },\n",
        "    \"file_uploader_label\": {\"ko\": \"분석할 .txt 파일을 선택하세요.\", \"en\": \"Choose a .txt file to analyze.\"},\n",
        "    \"parsing_success\": {\"ko\": \"파일 파싱 성공! {count}개의 메시지를 발견했습니다.\", \"en\": \"File parsed successfully! Found {count} messages.\"},\n",
        "    \"parsing_error\": {\"ko\": \"카카오톡 파일 형식을 인식할 수 없습니다. 파일을 확인해주세요.\", \"en\": \"Could not recognize the KakaoTalk file format. Please check the file.\"},\n",
        "    \"analysis_button\": {\"ko\": \"종합 분석 시작하기 🚀\", \"en\": \"Start Comprehensive Analysis 🚀\"},\n",
        "    \"spinner_profile\": {\"ko\": \"1/3: 팀 프로필 분석 중...\", \"en\": \"1/3: Analyzing Team Profile...\"},\n",
        "    \"spinner_timeline\": {\"ko\": \"2/3: 피로도 타임라인 분석 중...\", \"en\": \"2/3: Analyzing Fatigue Timeline...\"},\n",
        "    \"spinner_network\": {\"ko\": \"3/3: 관계 네트워크 분석 중...\", \"en\": \"3/3: Analyzing Relationship Network...\"},\n",
        "    \"analysis_complete\": {\"ko\": \"✅ 모든 분석이 완료되었습니다! 아래 탭에서 결과를 확인하세요.\", \"en\": \"✅ Analysis complete! Check the results in the tabs below.\"},\n",
        "    \"file_process_error\": {\"ko\": \"파일 처리 중 오류 발생\", \"en\": \"Error processing file\"},\n",
        "    # Results\n",
        "    \"results_header\": {\"ko\": \"2. 진단 결과\", \"en\": \"2. Diagnostic Results\"},\n",
        "    \"tab_profile\": {\"ko\": \"**팀 프로필 (진단)**\", \"en\": \"**Team Profile (Diagnosis)**\"},\n",
        "    \"tab_fatigue\": {\"ko\": \"**피로도 변화 (예측)**\", \"en\": \"**Fatigue Trajectory (Prediction)**\"},\n",
        "    \"tab_network\": {\"ko\": \"**관계 네트워크 (예측)**\", \"en\": \"**Relationship Network (Prediction)**\"},\n",
        "    \"profile_subheader\": {\"ko\": \"정체성 계수 맵 (Identity Coefficient Map)\", \"en\": \"Identity Coefficient Map\"},\n",
        "    \"profile_info\": {\"ko\": \"팀원들의 성향과 역할을 파악하여 팀의 전체적인 구성을 진단합니다.\", \"en\": \"Diagnoses the overall team composition by identifying member traits and roles.\"},\n",
        "    \"profile_error\": {\"ko\": \"프로필 데이터를 표시할 수 없습니다\", \"en\": \"Could not display profile data\"},\n",
        "    \"profile_warning\": {\"ko\": \"팀 프로필 데이터가 없습니다.\", \"en\": \"No team profile data available.\"},\n",
        "    \"fatigue_subheader\": {\"ko\": \"피로도 시계열 그래프 (Fatigue Timeline)\", \"en\": \"Fatigue Timeline Graph\"},\n",
        "    \"fatigue_info\": {\"ko\": \"시간에 따른 팀원들의 감정적, 업무적 소진 상태의 변화를 예측합니다.\", \"en\": \"Predicts the changes in team members' emotional and professional burnout over time.\"},\n",
        "    \"fatigue_error\": {\"ko\": \"타임라인 데이터를 표시할 수 없습니다\", \"en\": \"Could not display timeline data\"},\n",
        "    \"fatigue_warning\": {\"ko\": \"피로도 타임라인 데이터가 없습니다.\", \"en\": \"No fatigue timeline data available.\"},\n",
        "    \"network_subheader\": {\"ko\": \"갈등 네트워크 맵 (Conflict Network Map)\", \"en\": \"Conflict Network Map\"},\n",
        "    \"network_info\": {\"ko\": \"팀원 간 상호작용의 질을 분석하여 잠재적 갈등 및 협력 관계를 예측합니다. (그래프는 마우스로 조작 가능합니다)\", \"en\": \"Predicts potential conflicts and collaborations by analyzing the quality of interactions. (The graph is interactive).\"},\n",
        "    \"network_error\": {\"ko\": \"네트워크 그래프를 렌더링하는 중 오류 발생\", \"en\": \"Error rendering network graph\"},\n",
        "    \"network_warning\": {\"ko\": \"네트워크 데이터를 생성할 수 없습니다.\", \"en\": \"Could not generate network data.\"},\n",
        "    # DataFrame Columns\n",
        "    \"col_name\": {\"ko\": \"이름\", \"en\": \"Name\"},\n",
        "    \"col_emotion\": {\"ko\": \"감정 계수\", \"en\": \"Emotion Score\"},\n",
        "    \"col_cognition\": {\"ko\": \"사고 계수\", \"en\": \"Cognition Score\"},\n",
        "    \"col_expression\": {\"ko\": \"표현 계수\", \"en\": \"Expression Score\"},\n",
        "    \"col_value\": {\"ko\": \"가치 계수\", \"en\": \"Value Score\"},\n",
        "    \"col_bias\": {\"ko\": \"편향 계수\", \"en\": \"Bias Score\"},\n",
        "    \"col_role\": {\"ko\": \"핵심 역할\", \"en\": \"Core Role\"},\n",
        "}\n",
        "\n",
        "# --- Page Config ---\n",
        "st.set_page_config(\n",
        "    page_title=TEXTS[\"page_title\"][\"en\"],\n",
        "    page_icon=\"🤖\",\n",
        "    layout=\"wide\"\n",
        ")\n",
        "\n",
        "# --- Initialize Session State ---\n",
        "if 'analysis_result' not in st.session_state:\n",
        "    st.session_state.analysis_result = {}\n",
        "if 'api_key_configured' not in st.session_state:\n",
        "    st.session_state.api_key_configured = False\n",
        "if 'lang' not in st.session_state:\n",
        "    st.session_state.lang = 'ko'\n",
        "\n",
        "# --- Sidebar for Settings ---\n",
        "with st.sidebar:\n",
        "    st.header(TEXTS[\"sidebar_header\"][st.session_state.lang])\n",
        "\n",
        "    # Language Selector\n",
        "    lang_choice = st.selectbox(\n",
        "        label=f'{TEXTS[\"language_selector\"][\"en\"]} / {TEXTS[\"language_selector\"][\"ko\"]}',\n",
        "        options=['한국어', 'English'],\n",
        "        index=0 if st.session_state.lang == 'ko' else 1,\n",
        "        key='lang_selector'\n",
        "    )\n",
        "    st.session_state.lang = 'ko' if lang_choice == '한국어' else 'en'\n",
        "    lang = st.session_state.lang\n",
        "\n",
        "    # API Key Management\n",
        "    try:\n",
        "        api_key = st.secrets[\"GEMINI_API_KEY\"]\n",
        "        st.success(TEXTS[\"api_key_loaded\"][lang])\n",
        "    except (FileNotFoundError, KeyError):\n",
        "        st.warning(TEXTS[\"local_env_warning\"][lang])\n",
        "        api_key = st.text_input(TEXTS[\"api_key_input\"][lang], type=\"password\", key=\"api_key_input\")\n",
        "\n",
        "    if api_key and not st.session_state.api_key_configured:\n",
        "        try:\n",
        "            genai.configure(api_key=api_key)\n",
        "            st.session_state.api_key_configured = True\n",
        "            st.success(TEXTS[\"api_key_success\"][lang])\n",
        "        except Exception as e:\n",
        "            st.error(f\"{TEXTS['api_key_failure'][lang]}: {e}\")\n",
        "\n",
        "    if not st.session_state.api_key_configured:\n",
        "        st.info(TEXTS[\"api_key_info\"][lang])\n",
        "\n",
        "# --- Main UI ---\n",
        "lang = st.session_state.lang\n",
        "st.title(TEXTS[\"main_title\"][lang])\n",
        "st.markdown(TEXTS[\"main_description\"][lang])\n",
        "\n",
        "# Prompts remain in Korean as they are optimized for analyzing Korean text.\n",
        "# (Prompts are omitted here for brevity, they are the same as before)\n",
        "PROMPT_TEAM_PROFILE = \"\"\"...\"\"\" # Same as before\n",
        "PROMPT_FATIGUE_TIMELINE = \"\"\"...\"\"\" # Same as before\n",
        "PROMPT_CONFLICT_NETWORK = \"\"\"...\"\"\" # Same as before\n",
        "\n",
        "# (Parser, API Caller, and Graphing functions are omitted for brevity, they are the same as before)\n",
        "def parse_kakao_talk(file_content):\n",
        "    \"\"\"...\"\"\" # Same as before\n",
        "    pattern = re.compile(r\"--------------- (\\d{4}년 \\d{1,2}월 \\d{1,2}일) \")\n",
        "    chat_lines = file_content.split('\\n')\n",
        "    data, current_date = [], None\n",
        "    for line in chat_lines:\n",
        "        date_match = pattern.match(line)\n",
        "        if date_match:\n",
        "            current_date_str = date_match.group(1)\n",
        "            current_date = datetime.strptime(current_date_str, \"%Y년 %m월 %d일\").date()\n",
        "        elif line.startswith('[') and current_date:\n",
        "            try:\n",
        "                parts = line.split('] ', 2)\n",
        "                if len(parts) == 3:\n",
        "                    data.append({\"date\": current_date, \"speaker\": parts[0][1:], \"message\": parts[2]})\n",
        "            except (IndexError, ValueError): continue\n",
        "    return pd.DataFrame(data) if data else None\n",
        "\n",
        "def call_gemini_api(prompt, chat_log):\n",
        "    \"\"\"...\"\"\" # Same as before\n",
        "    model = genai.GenerativeModel('gemini-pro')\n",
        "    full_prompt = prompt.format(chat_log=chat_log)\n",
        "    try:\n",
        "        response = model.generate_content(full_prompt)\n",
        "        cleaned_text = response.text.strip().replace(\"```json\", \"\").replace(\"```\", \"\")\n",
        "        return json.loads(cleaned_text)\n",
        "    except Exception as e:\n",
        "        st.error(f\"API Error: {e}\")\n",
        "        return None\n",
        "\n",
        "def draw_network_graph(network_data):\n",
        "    \"\"\"...\"\"\" # Same as before\n",
        "    if not network_data or 'nodes' not in network_data or 'edges' not in network_data:\n",
        "        st.warning(TEXTS[\"network_warning\"][st.session_state.lang])\n",
        "        return\n",
        "    net = Network(height=\"600px\", width=\"100%\", bgcolor=\"#222222\", font_color=\"white\", notebook=True, directed=False)\n",
        "    color_map = {\"high_risk\": \"#FF4136\", \"medium_risk\": \"#FF851B\", \"potential_risk\": \"#FFDC00\", \"stable\": \"#DDDDDD\"}\n",
        "    for node in network_data['nodes']: net.add_node(node['id'], label=node['label'], size=25)\n",
        "    for edge in network_data['edges']:\n",
        "        edge_type = edge.get('type', 'stable')\n",
        "        net.add_edge(edge['from'], edge['to'], color=color_map.get(edge_type, \"#DDDDDD\"), width=4 if edge_type == 'high_risk' else 2)\n",
        "    try:\n",
        "        net.save_graph(\"network_graph.html\")\n",
        "        with open(\"network_graph.html\", 'r', encoding='utf-8') as f: html_content = f.read()\n",
        "        components.html(html_content, height=620)\n",
        "    except Exception as e: st.error(f\"{TEXTS['network_error'][st.session_state.lang]}: {e}\")\n",
        "\n",
        "\n",
        "st.header(TEXTS[\"upload_header\"][lang])\n",
        "st.info(TEXTS[\"upload_info\"][lang])\n",
        "\n",
        "uploaded_file = st.file_uploader(TEXTS[\"file_uploader_label\"][lang], type=\"txt\", key=\"file_uploader\")\n",
        "\n",
        "if uploaded_file is not None and st.session_state.api_key_configured:\n",
        "    try:\n",
        "        file_content = uploaded_file.getvalue().decode(\"utf-8\")\n",
        "        chat_df = parse_kakao_talk(file_content)\n",
        "\n",
        "        if chat_df is not None:\n",
        "            st.success(TEXTS[\"parsing_success\"][lang].format(count=len(chat_df)))\n",
        "\n",
        "            if st.button(TEXTS[\"analysis_button\"][lang], key=\"start_analysis\"):\n",
        "                chat_log_for_api = \"\\n\".join(chat_df.apply(lambda row: f\"[{row['speaker']}] {row['message']}\", axis=1))\n",
        "\n",
        "                with st.spinner(TEXTS[\"spinner_profile\"][lang]):\n",
        "                    st.session_state.analysis_result['profile'] = call_gemini_api(PROMPT_TEAM_PROFILE, chat_log_for_api)\n",
        "                with st.spinner(TEXTS[\"spinner_timeline\"][lang]):\n",
        "                    st.session_state.analysis_result['timeline'] = call_gemini_api(PROMPT_FATIGUE_TIMELINE, chat_log_for_api)\n",
        "                with st.spinner(TEXTS[\"spinner_network\"][lang]):\n",
        "                    st.session_state.analysis_result['network'] = call_gemini_api(PROMPT_CONFLICT_NETWORK, chat_log_for_api)\n",
        "\n",
        "                st.success(TEXTS[\"analysis_complete\"][lang])\n",
        "        else:\n",
        "            st.error(TEXTS[\"parsing_error\"][lang])\n",
        "    except Exception as e:\n",
        "        st.error(f\"{TEXTS['file_process_error'][lang]}: {e}\")\n",
        "\n",
        "# --- Display Results in Tabs ---\n",
        "if st.session_state.analysis_result:\n",
        "    st.header(TEXTS[\"results_header\"][lang])\n",
        "\n",
        "    tab_titles = [TEXTS[\"tab_profile\"][lang], TEXTS[\"tab_fatigue\"][lang], TEXTS[\"tab_network\"][lang]]\n",
        "    tab1, tab2, tab3 = st.tabs(tab_titles)\n",
        "\n",
        "    with tab1:\n",
        "        st.subheader(TEXTS[\"profile_subheader\"][lang])\n",
        "        st.info(TEXTS[\"profile_info\"][lang])\n",
        "        profile_data = st.session_state.analysis_result.get('profile')\n",
        "        if profile_data:\n",
        "            try:\n",
        "                profile_df = pd.DataFrame(profile_data)\n",
        "                # Rename columns for multilingual support\n",
        "                profile_df.rename(columns={\n",
        "                    \"name\": TEXTS['col_name'][lang],\n",
        "                    \"emotion_score\": TEXTS['col_emotion'][lang],\n",
        "                    \"cognition_score\": TEXTS['col_cognition'][lang],\n",
        "                    \"expression_score\": TEXTS['col_expression'][lang],\n",
        "                    \"value_score\": TEXTS['col_value'][lang],\n",
        "                    \"bias_score\": TEXTS['col_bias'][lang],\n",
        "                    \"core_role\": TEXTS['col_role'][lang],\n",
        "                }, inplace=True)\n",
        "                st.dataframe(profile_df, use_container_width=True)\n",
        "            except Exception as e:\n",
        "                st.error(f\"{TEXTS['profile_error'][lang]}: {e}\")\n",
        "                st.json(profile_data)\n",
        "        else:\n",
        "            st.warning(TEXTS[\"profile_warning\"][lang])\n",
        "\n",
        "    with tab2:\n",
        "        st.subheader(TEXTS[\"fatigue_subheader\"][lang])\n",
        "        st.info(TEXTS[\"fatigue_info\"][lang])\n",
        "        timeline_data = st.session_state.analysis_result.get('timeline')\n",
        "        if timeline_data:\n",
        "            try:\n",
        "                timeline_df = pd.DataFrame.from_dict(timeline_data, orient='index')\n",
        "                timeline_df.index = pd.to_datetime(timeline_df.index)\n",
        "                timeline_df = timeline_df.sort_index()\n",
        "                st.line_chart(timeline_df)\n",
        "            except Exception as e:\n",
        "                st.error(f\"{TEXTS['fatigue_error'][lang]}: {e}\")\n",
        "                st.json(timeline_data)\n",
        "        else:\n",
        "            st.warning(TEXTS[\"fatigue_warning\"][lang])\n",
        "\n",
        "    with tab3:\n",
        "        st.subheader(TEXTS[\"network_subheader\"][lang])\n",
        "        st.info(TEXTS[\"network_info\"][lang])\n",
        "        network_data = st.session_state.analysis_result.get('network')\n",
        "        if network_data:\n",
        "            draw_network_graph(network_data)\n",
        "        else:\n",
        "            st.warning(TEXTS[\"network_warning\"][lang])"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "id": "SWo9spb1BFIf"
      }
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}