import streamlit as st
from analyzer import analyze_report

# --- 다국어 텍스트 관리 ---
# UI에 사용될 모든 텍스트를 언어별로 정의합니다.
TRANSLATIONS = {
    "ko": {
        "page_title": "MirrorOrg 조직 진단",
        "lang_selector_label": "Language / 언어",
        "sidebar_info_header": "💡 **사용 방법**",
        "sidebar_info_text": "1. 팀의 대화 기록 파일(예: 카카오톡/whatsapp .txt)을 업로드하세요.\n2. '분석 리포트 생성하기' 버튼을 클릭하세요.\n3. AI가 생성한 1페이지 진단 리포트를 받아보세요.",
        "sidebar_warn_header": "⚠️ **면책 조항**",
        "sidebar_warn_text": "본 서비스는 기술 시연용 MVP입니다. 분석 결과는 참고용이며, 인사 평가의 근거로 사용될 수 없습니다. 업로드된 데이터는 메모리에서만 처리되며 서버에 저장되지 않습니다.",
        "sidebar_copyright": "© 2025 Sunghwan Oh. All Rights Reserved.",
        "main_title": "🧠 MirrorOrg 조직 진단 리포트",
        "main_subtitle": "AI 조직 심리 분석가가 대화 기록을 바탕으로 팀의 소통 패턴과 시스템 리스크를 진단합니다.",
        "uploader_label": "분석할 대화 파일을 업로드하세요. (카카오톡/whatsapp .txt 파일 권장)",
        "button_label": "분석 리포트 생성하기",
        "spinner_text": "AI가 대화 내용을 분석하여 리포트를 생성하는 중입니다... 잠시만 기다려주세요.",
        "toast_long_text": "대화 내용이 너무 길어 최신 3000줄만 분석합니다.",
        "success_message": "✅ AI 조직 진단 리포트가 완성되었습니다.",
        "error_report_failed": "리포트 생성에 실패했습니다. 파일 내용이 너무 짧거나 유효하지 않은 형식일 수 있습니다.",
        "error_generic": "오류가 발생했습니다: {e}",
        "warning_no_file": "분석을 위해 먼저 대화 파일을 업로드해주세요."
    },
    "en": {
        "page_title": "MirrorOrg Diagnostics",
        "lang_selector_label": "Language / 언어",
        "sidebar_info_header": "💡 **How to Use**",
        "sidebar_info_text": "1. Upload your team's chat log (e.g., KakaoTalk/whatsapp .txt file).\n2. Click the 'Generate Analysis Report' button.\n3. Receive a 1-page diagnostic report generated by AI.",
        "sidebar_warn_header": "⚠️ **Disclaimer**",
        "sidebar_warn_text": "This is a technology demonstrator. The analysis is for reference only and should not be used for personnel evaluation. All uploaded data is processed in memory and not stored.",
        "sidebar_copyright": "© 2025 Sunghwan Oh. All Rights Reserved.",
        "main_title": "🧠 MirrorOrg Diagnostic Report",
        "main_subtitle": "An AI organizational psychologist diagnoses team communication patterns and systemic risks based on your chat history.",
        "uploader_label": "Upload a chat file to analyze. (KakaoTalk/whatsapp .txt recommended)",
        "button_label": "Generate Analysis Report",
        "spinner_text": "The AI is analyzing the conversation to generate a report... Please wait.",
        "toast_long_text": "The chat history is too long. Analyzing the latest 3000 lines.",
        "success_message": "✅ The AI diagnostic report is complete.",
        "error_report_failed": "Failed to generate the report. The file content might be too short or in an invalid format.",
        "error_generic": "An error occurred: {e}",
        "warning_no_file": "Please upload a chat file first to begin analysis."
    }
}

# --- UI 설정 (페이지 및 사이드바) ---
# 언어 선택에 따라 페이지 제목을 동적으로 설정
lang_selection = st.sidebar.radio(
    label="Language / 언어", 
    options=["한국어", "English"], 
    key="lang_selector"
)
lang_code = "ko" if lang_selection == "한국어" else "en"
T = TRANSLATIONS[lang_code] # 선택된 언어의 텍스트 딕셔너리

st.set_page_config(page_title=T["page_title"], layout="centered")

# 사이드바 구성
with st.sidebar:
    st.info(f"#### {T['sidebar_info_header']}\n{T['sidebar_info_text']}")
    st.warning(f"#### {T['sidebar_warn_header']}\n{T['sidebar_warn_text']}")
    st.markdown("---")
    st.markdown(T["sidebar_copyright"])

# --- 메인 화면 구성 ---
st.title(T["main_title"])
st.markdown(T["main_subtitle"])

uploaded_file = st.file_uploader(
    T["uploader_label"], 
    type="txt"
)

analyze_button = st.button(T["button_label"], type="primary")

# --- 분석 로직 실행 ---
if analyze_button and uploaded_file:
    with st.spinner(T["spinner_text"]):
        try:
            chat_content = uploaded_file.read().decode("utf-8")
            
            lines = chat_content.split('\n')
            if len(lines) > 3000:
                chat_content = '\n'.join(lines[-3000:])
                st.toast(T["toast_long_text"])

            # 분석 모듈 호출 시, 선택된 언어 코드(lang_code)를 전달
            report = analyze_report(chat_content, lang=lang_code)

            if report:
                st.markdown("---")
                st.success(T["success_message"])
                st.markdown(report)
            else:
                st.error(T["error_report_failed"])

        except Exception as e:
            st.error(T["error_generic"].format(e=e))

elif analyze_button and not uploaded_file:
    st.warning(T["warning_no_file"])
