{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/HWAN-OH/mirrororg-mvp/blob/main/analyzer.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# analyzer.py\n",
        "import google.generativeai as genai\n",
        "import json\n",
        "import pandas as pd\n",
        "\n",
        "# Prompts remain here, as they are part of the analysis logic.\n",
        "PROMPT_TEAM_PROFILE = \"\"\"\n",
        "당신은 조직 심리 분석가입니다. 주어진 채팅 기록을 바탕으로, '미러오알지 팀 분석 사례' 문서의 '정체성 계수 맵'과 같이 각 팀원의 특성을 분석하고 결과를 JSON 형식으로 반환하세요.\n",
        "\n",
        "**분석 규칙:**\n",
        "1.  **참여자 식별:** 채팅 기록에 등장하는 모든 주요 참여자를 식별합니다.\n",
        "2.  **5대 계수 분석:** 각 참여자에 대해 다음 5가지 계수를 1-10점 척도로 평가합니다.\n",
        "    * **감정(Emotion):** 감정 표현의 빈도와 강도.\n",
        "    * **사고(Cognition):** 논리적, 분석적, 전략적 발언의 빈도.\n",
        "    * **표현(Expression):** 의견, 상태, 아이디어 표현의 적극성.\n",
        "    * **가치(Value):** 팀의 목표, 비전, 핵심 가치에 대한 언급.\n",
        "    * **편향(Bias):** 특정 주제나 방식에 대한 선호/회피 경향.\n",
        "3.  **핵심 역할 부여:** 각 참여자의 계수를 종합하여 'The Driver', 'The Coordinator' 등 가장 적합한 핵심 역할을 부여합니다.\n",
        "4.  **JSON 형식 출력:** 아래와 같은 리스트 형태의 JSON으로만 응답하세요. 다른 설명은 추가하지 마세요.\n",
        "    ```json\n",
        "    [\n",
        "      {\n",
        "        \"name\": \"참여자 이름\",\n",
        "        \"emotion_score\": 5,\n",
        "        \"cognition_score\": 9,\n",
        "        \"expression_score\": 6,\n",
        "        \"value_score\": 9,\n",
        "        \"bias_score\": 7,\n",
        "        \"core_role\": \"The Driver (전략 중심)\"\n",
        "      }\n",
        "    ]"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "id": "oEf3Z6VRmLh2"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**[입력 데이터: 채팅 기록]**\n",
        "---\n",
        "{chat_log}\n",
        "---\n",
        "\"\"\"\n",
        "\n",
        "PROMPT_FATIGUE_TIMELINE = \"\"\"\n",
        "당신은 조직 행동 분석가입니다. 주어진 채팅 기록을 분석하여, 시간 경과에 따른 각 팀원의 '피로도(Fatigue)' 변화를 추정하고, 그 결과를 날짜별 JSON 데이터로 반환하세요.\n",
        "\n",
        "**분석 규칙:**\n",
        "1.  **피로도 정의:** 피로도는 업무 부담, 스트레스, 부정적 감정 표현, 반응 속도 저하 등을 종합하여 1-10점으로 평가합니다. (1: 매우 낮음, 10: 매우 높음/소진 임박)\n",
        "2.  **날짜별 분석:** 채팅 기록에 나타난 날짜별로 각 참여자의 피로도를 추정합니다. 특정 날짜에 발언이 없으면 이전 상태를 유지하거나 주변 상황에 따라 추정합니다.\n",
        "3.  **JSON 형식 출력:** 아래와 같은 날짜-사용자-점수 구조의 JSON으로만 응답하세요. 다른 설명은 추가하지 마세요.\n",
        "    ```json\n",
        "    {\n",
        "      \"YYYY-MM-DD\": {\n",
        "        \"참여자1\": 3,\n",
        "        \"참여자2\": 5\n",
        "      },\n",
        "      \"YYYY-MM-DD\": {\n",
        "        \"참여자1\": 4,\n",
        "        \"참여자2\": 6\n",
        "      }\n",
        "    }\n",
        "    ```\n",
        "\n",
        "**[입력 데이터: 채팅 기록]**\n",
        "---\n",
        "{chat_log}\n",
        "---\n",
        "\"\"\"\n",
        "\n",
        "PROMPT_CONFLICT_NETWORK = \"\"\"\n",
        "당신은 관계 동역학 분석가입니다. 주어진 채팅 기록을 분석하여, 팀원 간의 상호작용을 '갈등 네트워크'로 모델링하고, 그 구조를 노드(node)와 엣지(edge) 형태의 JSON으로 반환하세요.\n",
        "\n",
        "**분석 규칙:**\n",
        "1.  **노드(Nodes):** 채팅에 참여한 모든 팀원을 노드로 정의합니다.\n",
        "2.  **엣지(Edges):** 두 팀원 간의 주요 상호작용을 엣지로 정의합니다.\n",
        "3.  **관계 유형(Relationship Type):** 각 엣지에 대해 관계를 다음 4가지 유형 중 하나로 분류합니다.\n",
        "    * `high_risk`: 의견 충돌, 비난, 무시 등 명백한 갈등.\n",
        "    * `medium_risk`: 잦은 의견 불일치, 긴장감 있는 대화.\n",
        "    * `potential_risk`: 잠재적 오해나 의견 차이가 있는 관계.\n",
        "    * `stable`: 지지, 동의, 협력 등 안정적인 관계.\n",
        "4.  **JSON 형식 출력:** 아래와 같은 노드와 엣지 리스트를 포함한 JSON 객체로만 응답하세요.\n",
        "    ```json\n",
        "    {\n",
        "      \"nodes\": [\n",
        "        {\"id\": \"참여자1\", \"label\": \"참여자1\"},\n",
        "        {\"id\": \"참여자2\", \"label\": \"참여자2\"}\n",
        "      ],\n",
        "      \"edges\": [\n",
        "        {\"from\": \"참여자1\", \"to\": \"참여자2\", \"type\": \"high_risk\"},\n",
        "        {\"from\": \"참여자1\", \"to\": \"참여자3\", \"type\": \"stable\"}\n",
        "      ]\n",
        "    }\n",
        "    ```\n",
        "\n",
        "**[입력 데이터: 채팅 기록]**\n",
        "---\n",
        "{chat_log}\n",
        "---\n",
        "\"\"\"\n",
        "\n",
        "def call_gemini_api(prompt: str, chat_log: str) -> dict | None:\n",
        "    \"\"\"\n",
        "    Calls the Gemini API and returns the parsed JSON response.\n",
        "    \"\"\"\n",
        "    model = genai.GenerativeModel('gemini-pro')\n",
        "    full_prompt = prompt.format(chat_log=chat_log)\n",
        "    try:\n",
        "        response = model.generate_content(full_prompt)\n",
        "        cleaned_text = response.text.strip().replace(\"```json\", \"\").replace(\"```\", \"\")\n",
        "        return json.loads(cleaned_text)\n",
        "    except Exception:\n",
        "        # Errors will be handled in the main app file to show them in the UI\n",
        "        return None\n",
        "\n",
        "def run_full_analysis(chat_df: pd.DataFrame) -> dict:\n",
        "    \"\"\"\n",
        "    Runs the full analysis suite on the parsed chat data.\n",
        "    \"\"\"\n",
        "    # Convert dataframe to a simple text log for the API\n",
        "    chat_log_for_api = \"\\n\".join(chat_df.apply(lambda row: f\"[{row['speaker']}] {row['message']}\", axis=1))\n",
        "\n",
        "    results = {}\n",
        "    results['profile'] = call_gemini_api(PROMPT_TEAM_PROFILE, chat_log_for_api)\n",
        "    results['timeline'] = call_gemini_api(PROMPT_FATIGUE_TIMELINE, chat_log_for_api)\n",
        "    results['network'] = call_gemini_api(PROMPT_CONFLICT_NETWORK, chat_log_for_api)\n",
        "    \n",
        "    return results\n",
        "\n",
        "  ```"
      ],
      "metadata": {
        "id": "H-TdBxw7mLh3"
      }
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}